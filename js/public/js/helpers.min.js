/**
 * Helpers class.
 * @constructor
 */
var Helpers = function() {
  var self  = {};
  for (key in this.modules) {
    self[key] = new this.modules[key]();
  }
  return self;
};

/**
  Plug modules into this object
  @name modules
  @type object
*/
Helpers.prototype.modules = {};
/**
 * Helpers
 * @module events
 */
Helpers.prototype.modules.events = function() {

    this.triggerEvent = function(el, eventName){
      var event;
      if (document.createEvent) {
        event = document.createEvent('HTMLEvents');
        event.initEvent(eventName,true,true);
      } else if (document.createEventObject) {// IE < 9
        event = document.createEventObject();
        event.eventType = eventName;
      }
      event.eventName = eventName;
      if (el.dispatchEvent) {
        el.dispatchEvent(event);
      } else if (el.fireEvent && htmlEvents['on'+eventName]) {// IE < 9
        el.fireEvent('on'+event.eventType,event);// can trigger only real event (e.g. 'click')
      } else if (el[eventName]){
        el[eventName]();
      } else if (el['on'+eventName]) {
        el['on'+eventName]();
      }
    };

    this.addEvent = function(el, type, handler){
      if (el.addEventListener) {
        el.addEventListener(type,handler,false);
      } else if (el.attachEvent && htmlEvents['on'+type]){// IE < 9
        el.attachEvent('on'+type,handler);
      } else {
        el['on'+type]=handler;
      }
    };

    this.removeEvent = function(el, type, handler){
      if(el.removeventListener) {
        el.removeEventListener(type,handler,false);
      } else if (el.detachEvent && htmlEvents['on'+type]){// IE < 9
        el.detachEvent('on'+type,handler);
      } else {
        el['on'+type]=null;
      }
    };

    // Return self
    return this;
};
/**
 * Helpers
 * @module objects
 */
Helpers.prototype.modules.objects = function() {
  
    /**
     * Get an objects length
     * @param {obj} object to get length of
     */
    this.length = function(obj) {
        var size = 0, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) size++;
        }
        return size;
    }

    // Return self
    return this;
};
/**
 * Helpers
 * @module viewport
 */
Helpers.prototype.modules.viewport = function() {

    /**
     * Get the viewport size
     */
    this.size = function() {
        var w = window,
            d = document,
            e = d.documentElement,
            g = d.getElementsByTagName('body')[0],
            x = w.innerWidth || e.clientWidth || g.clientWidth,
            y = w.innerHeight|| e.clientHeight|| g.clientHeight;
        return {
          width : x,
          height : y
        };
    };

    // Return self
    return this;
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiLCJoZWxwZXJzLmV2ZW50cy5qcyIsImhlbHBlcnMub2JqZWN0cy5qcyIsImhlbHBlcnMudmlld3BvcnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImhlbHBlcnMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIZWxwZXJzIGNsYXNzLlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnZhciBIZWxwZXJzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmICA9IHt9O1xuICBmb3IgKGtleSBpbiB0aGlzLm1vZHVsZXMpIHtcbiAgICBzZWxmW2tleV0gPSBuZXcgdGhpcy5tb2R1bGVzW2tleV0oKTtcbiAgfVxuICByZXR1cm4gc2VsZjtcbn07XG5cbi8qKlxuICBQbHVnIG1vZHVsZXMgaW50byB0aGlzIG9iamVjdFxuICBAbmFtZSBtb2R1bGVzXG4gIEB0eXBlIG9iamVjdFxuKi9cbkhlbHBlcnMucHJvdG90eXBlLm1vZHVsZXMgPSB7fTsiLCIvKipcbiAqIEhlbHBlcnNcbiAqIEBtb2R1bGUgZXZlbnRzXG4gKi9cbkhlbHBlcnMucHJvdG90eXBlLm1vZHVsZXMuZXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICB0aGlzLnRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uKGVsLCBldmVudE5hbWUpe1xuICAgICAgdmFyIGV2ZW50O1xuICAgICAgaWYgKGRvY3VtZW50LmNyZWF0ZUV2ZW50KSB7XG4gICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgICAgICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50TmFtZSx0cnVlLHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCkgey8vIElFIDwgOVxuICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gICAgICAgIGV2ZW50LmV2ZW50VHlwZSA9IGV2ZW50TmFtZTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbiAgICAgIGlmIChlbC5kaXNwYXRjaEV2ZW50KSB7XG4gICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgfSBlbHNlIGlmIChlbC5maXJlRXZlbnQgJiYgaHRtbEV2ZW50c1snb24nK2V2ZW50TmFtZV0pIHsvLyBJRSA8IDlcbiAgICAgICAgZWwuZmlyZUV2ZW50KCdvbicrZXZlbnQuZXZlbnRUeXBlLGV2ZW50KTsvLyBjYW4gdHJpZ2dlciBvbmx5IHJlYWwgZXZlbnQgKGUuZy4gJ2NsaWNrJylcbiAgICAgIH0gZWxzZSBpZiAoZWxbZXZlbnROYW1lXSl7XG4gICAgICAgIGVsW2V2ZW50TmFtZV0oKTtcbiAgICAgIH0gZWxzZSBpZiAoZWxbJ29uJytldmVudE5hbWVdKSB7XG4gICAgICAgIGVsWydvbicrZXZlbnROYW1lXSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmFkZEV2ZW50ID0gZnVuY3Rpb24oZWwsIHR5cGUsIGhhbmRsZXIpe1xuICAgICAgaWYgKGVsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLGhhbmRsZXIsZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmIChlbC5hdHRhY2hFdmVudCAmJiBodG1sRXZlbnRzWydvbicrdHlwZV0pey8vIElFIDwgOVxuICAgICAgICBlbC5hdHRhY2hFdmVudCgnb24nK3R5cGUsaGFuZGxlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbFsnb24nK3R5cGVdPWhhbmRsZXI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbihlbCwgdHlwZSwgaGFuZGxlcil7XG4gICAgICBpZihlbC5yZW1vdmV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLGhhbmRsZXIsZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmIChlbC5kZXRhY2hFdmVudCAmJiBodG1sRXZlbnRzWydvbicrdHlwZV0pey8vIElFIDwgOVxuICAgICAgICBlbC5kZXRhY2hFdmVudCgnb24nK3R5cGUsaGFuZGxlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbFsnb24nK3R5cGVdPW51bGw7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFJldHVybiBzZWxmXG4gICAgcmV0dXJuIHRoaXM7XG59OyIsIi8qKlxuICogSGVscGVyc1xuICogQG1vZHVsZSBvYmplY3RzXG4gKi9cbkhlbHBlcnMucHJvdG90eXBlLm1vZHVsZXMub2JqZWN0cyA9IGZ1bmN0aW9uKCkge1xuICBcbiAgICAvKipcbiAgICAgKiBHZXQgYW4gb2JqZWN0cyBsZW5ndGhcbiAgICAgKiBAcGFyYW0ge29ian0gb2JqZWN0IHRvIGdldCBsZW5ndGggb2ZcbiAgICAgKi9cbiAgICB0aGlzLmxlbmd0aCA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICB2YXIgc2l6ZSA9IDAsIGtleTtcbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHNpemUrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gc2VsZlxuICAgIHJldHVybiB0aGlzO1xufTsiLCIvKipcbiAqIEhlbHBlcnNcbiAqIEBtb2R1bGUgdmlld3BvcnRcbiAqL1xuSGVscGVycy5wcm90b3R5cGUubW9kdWxlcy52aWV3cG9ydCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2aWV3cG9ydCBzaXplXG4gICAgICovXG4gICAgdGhpcy5zaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3ID0gd2luZG93LFxuICAgICAgICAgICAgZCA9IGRvY3VtZW50LFxuICAgICAgICAgICAgZSA9IGQuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgICAgICAgZyA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2JvZHknKVswXSxcbiAgICAgICAgICAgIHggPSB3LmlubmVyV2lkdGggfHwgZS5jbGllbnRXaWR0aCB8fCBnLmNsaWVudFdpZHRoLFxuICAgICAgICAgICAgeSA9IHcuaW5uZXJIZWlnaHR8fCBlLmNsaWVudEhlaWdodHx8IGcuY2xpZW50SGVpZ2h0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdpZHRoIDogeCxcbiAgICAgICAgICBoZWlnaHQgOiB5XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIC8vIFJldHVybiBzZWxmXG4gICAgcmV0dXJuIHRoaXM7XG59OyJdfQ==
