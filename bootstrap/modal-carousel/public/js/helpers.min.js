/**
 * Helpers class.
 * @constructor
 */
var Helpers = function() {
  var self  = {};
  for (key in this.modules) {
    self[key] = new this.modules[key]();
  }
  return self;
};

/**
  Plug modules into this object
  @name modules
  @type object
*/
Helpers.prototype.modules = {};
/**
 * Helpers
 * @module events
 */
Helpers.prototype.modules.events = function() {

    this.triggerEvent = function(el, eventName){
      var event;
      if (document.createEvent) {
        event = document.createEvent('HTMLEvents');
        event.initEvent(eventName,true,true);
      } else if (document.createEventObject) {// IE < 9
        event = document.createEventObject();
        event.eventType = eventName;
      }
      event.eventName = eventName;
      if (el.dispatchEvent) {
        el.dispatchEvent(event);
      } else if (el.fireEvent && htmlEvents['on'+eventName]) {// IE < 9
        el.fireEvent('on'+event.eventType,event);// can trigger only real event (e.g. 'click')
      } else if (el[eventName]){
        el[eventName]();
      } else if (el['on'+eventName]) {
        el['on'+eventName]();
      }
    };

    this.addEvent = function(el, type, handler){
      if (el.addEventListener) {
        el.addEventListener(type,handler,false);
      } else if (el.attachEvent && htmlEvents['on'+type]){// IE < 9
        el.attachEvent('on'+type,handler);
      } else {
        el['on'+type]=handler;
      }
    };

    this.removeEvent = function(el, type, handler){
      if(el.removeventListener) {
        el.removeEventListener(type,handler,false);
      } else if (el.detachEvent && htmlEvents['on'+type]){// IE < 9
        el.detachEvent('on'+type,handler);
      } else {
        el['on'+type]=null;
      }
    };

    // Return self
    return this;
};
/**
 * Helpers
 * @module image
 */
Helpers.prototype.modules.image = function() {

    /**
    getImageSize
    */
    this.getImageSize = function(img, callback) {

        // Original
        var width, height;
        
        // Display
        var d_width = img.width;
        var d_height = img.height;
        
        var size = function() {
            return {
              width : width,
              height : height,
              d_width : d_width,
              d_height : d_height
            };
        };
        
        // Using naturalWidth/Height
        if (img.naturalWidth) {
          width = img.naturalWidth;
          height = img.naturalHeight;
          return callback(size());
        } else {
          // Using an Image Object
          tmp = new Image();
          tmp.onload = function() {
            width = this.width;
            height = this.height;
            return callback(size());
          };
          tmp.src = img.src;
        }

    };

    // Return self
    return this;
};
/**
 * Helpers
 * @module objects
 */
Helpers.prototype.modules.objects = function() {
  
    /**
     * Get an objects length
     * @param {obj} object to get length of
     */
    this.length = function(obj) {
        var size = 0, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) size++;
        }
        return size;
    }

    // Return self
    return this;
};
/**
 * Helpers
 * @module viewport
 */
Helpers.prototype.modules.viewport = function() {

    /**
     * Get the viewport size
     */
    this.size = function() {
        var w = window,
            d = document,
            e = d.documentElement,
            g = d.getElementsByTagName('body')[0],
            x = w.innerWidth || e.clientWidth || g.clientWidth,
            y = w.innerHeight|| e.clientHeight|| g.clientHeight;
        return {
          width : x,
          height : y
        };
    };

    // Return self
    return this;
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlcnMuanMiLCJoZWxwZXJzLmV2ZW50cy5qcyIsImhlbHBlcnMuaW1hZ2UuanMiLCJoZWxwZXJzLm9iamVjdHMuanMiLCJoZWxwZXJzLnZpZXdwb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDakRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQy9DQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiaGVscGVycy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSGVscGVycyBjbGFzcy5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG52YXIgSGVscGVycyA9IGZ1bmN0aW9uKCkge1xyXG4gIHZhciBzZWxmICA9IHt9O1xyXG4gIGZvciAoa2V5IGluIHRoaXMubW9kdWxlcykge1xyXG4gICAgc2VsZltrZXldID0gbmV3IHRoaXMubW9kdWxlc1trZXldKCk7XHJcbiAgfVxyXG4gIHJldHVybiBzZWxmO1xyXG59O1xyXG5cclxuLyoqXHJcbiAgUGx1ZyBtb2R1bGVzIGludG8gdGhpcyBvYmplY3RcclxuICBAbmFtZSBtb2R1bGVzXHJcbiAgQHR5cGUgb2JqZWN0XHJcbiovXHJcbkhlbHBlcnMucHJvdG90eXBlLm1vZHVsZXMgPSB7fTsiLCIvKipcclxuICogSGVscGVyc1xyXG4gKiBAbW9kdWxlIGV2ZW50c1xyXG4gKi9cclxuSGVscGVycy5wcm90b3R5cGUubW9kdWxlcy5ldmVudHMgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICB0aGlzLnRyaWdnZXJFdmVudCA9IGZ1bmN0aW9uKGVsLCBldmVudE5hbWUpe1xyXG4gICAgICB2YXIgZXZlbnQ7XHJcbiAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVFdmVudCkge1xyXG4gICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcclxuICAgICAgICBldmVudC5pbml0RXZlbnQoZXZlbnROYW1lLHRydWUsdHJ1ZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QpIHsvLyBJRSA8IDlcclxuICAgICAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XHJcbiAgICAgICAgZXZlbnQuZXZlbnRUeXBlID0gZXZlbnROYW1lO1xyXG4gICAgICB9XHJcbiAgICAgIGV2ZW50LmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcclxuICAgICAgaWYgKGVsLmRpc3BhdGNoRXZlbnQpIHtcclxuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxuICAgICAgfSBlbHNlIGlmIChlbC5maXJlRXZlbnQgJiYgaHRtbEV2ZW50c1snb24nK2V2ZW50TmFtZV0pIHsvLyBJRSA8IDlcclxuICAgICAgICBlbC5maXJlRXZlbnQoJ29uJytldmVudC5ldmVudFR5cGUsZXZlbnQpOy8vIGNhbiB0cmlnZ2VyIG9ubHkgcmVhbCBldmVudCAoZS5nLiAnY2xpY2snKVxyXG4gICAgICB9IGVsc2UgaWYgKGVsW2V2ZW50TmFtZV0pe1xyXG4gICAgICAgIGVsW2V2ZW50TmFtZV0oKTtcclxuICAgICAgfSBlbHNlIGlmIChlbFsnb24nK2V2ZW50TmFtZV0pIHtcclxuICAgICAgICBlbFsnb24nK2V2ZW50TmFtZV0oKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmFkZEV2ZW50ID0gZnVuY3Rpb24oZWwsIHR5cGUsIGhhbmRsZXIpe1xyXG4gICAgICBpZiAoZWwuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHlwZSxoYW5kbGVyLGZhbHNlKTtcclxuICAgICAgfSBlbHNlIGlmIChlbC5hdHRhY2hFdmVudCAmJiBodG1sRXZlbnRzWydvbicrdHlwZV0pey8vIElFIDwgOVxyXG4gICAgICAgIGVsLmF0dGFjaEV2ZW50KCdvbicrdHlwZSxoYW5kbGVyKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBlbFsnb24nK3R5cGVdPWhhbmRsZXI7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKGVsLCB0eXBlLCBoYW5kbGVyKXtcclxuICAgICAgaWYoZWwucmVtb3ZldmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLGhhbmRsZXIsZmFsc2UpO1xyXG4gICAgICB9IGVsc2UgaWYgKGVsLmRldGFjaEV2ZW50ICYmIGh0bWxFdmVudHNbJ29uJyt0eXBlXSl7Ly8gSUUgPCA5XHJcbiAgICAgICAgZWwuZGV0YWNoRXZlbnQoJ29uJyt0eXBlLGhhbmRsZXIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsWydvbicrdHlwZV09bnVsbDtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBSZXR1cm4gc2VsZlxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07IiwiLyoqXHJcbiAqIEhlbHBlcnNcclxuICogQG1vZHVsZSBpbWFnZVxyXG4gKi9cclxuSGVscGVycy5wcm90b3R5cGUubW9kdWxlcy5pbWFnZSA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgZ2V0SW1hZ2VTaXplXHJcbiAgICAqL1xyXG4gICAgdGhpcy5nZXRJbWFnZVNpemUgPSBmdW5jdGlvbihpbWcsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgIC8vIE9yaWdpbmFsXHJcbiAgICAgICAgdmFyIHdpZHRoLCBoZWlnaHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gRGlzcGxheVxyXG4gICAgICAgIHZhciBkX3dpZHRoID0gaW1nLndpZHRoO1xyXG4gICAgICAgIHZhciBkX2hlaWdodCA9IGltZy5oZWlnaHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICB3aWR0aCA6IHdpZHRoLFxyXG4gICAgICAgICAgICAgIGhlaWdodCA6IGhlaWdodCxcclxuICAgICAgICAgICAgICBkX3dpZHRoIDogZF93aWR0aCxcclxuICAgICAgICAgICAgICBkX2hlaWdodCA6IGRfaGVpZ2h0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBVc2luZyBuYXR1cmFsV2lkdGgvSGVpZ2h0XHJcbiAgICAgICAgaWYgKGltZy5uYXR1cmFsV2lkdGgpIHtcclxuICAgICAgICAgIHdpZHRoID0gaW1nLm5hdHVyYWxXaWR0aDtcclxuICAgICAgICAgIGhlaWdodCA9IGltZy5uYXR1cmFsSGVpZ2h0O1xyXG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHNpemUoKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIFVzaW5nIGFuIEltYWdlIE9iamVjdFxyXG4gICAgICAgICAgdG1wID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgICB0bXAub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy53aWR0aDtcclxuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhzaXplKCkpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIHRtcC5zcmMgPSBpbWcuc3JjO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFJldHVybiBzZWxmXHJcbiAgICByZXR1cm4gdGhpcztcclxufTsiLCIvKipcclxuICogSGVscGVyc1xyXG4gKiBAbW9kdWxlIG9iamVjdHNcclxuICovXHJcbkhlbHBlcnMucHJvdG90eXBlLm1vZHVsZXMub2JqZWN0cyA9IGZ1bmN0aW9uKCkge1xyXG4gIFxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYW4gb2JqZWN0cyBsZW5ndGhcclxuICAgICAqIEBwYXJhbSB7b2JqfSBvYmplY3QgdG8gZ2V0IGxlbmd0aCBvZlxyXG4gICAgICovXHJcbiAgICB0aGlzLmxlbmd0aCA9IGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgIHZhciBzaXplID0gMCwga2V5O1xyXG4gICAgICAgIGZvciAoa2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHNpemUrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIHNlbGZcclxuICAgIHJldHVybiB0aGlzO1xyXG59OyIsIi8qKlxyXG4gKiBIZWxwZXJzXHJcbiAqIEBtb2R1bGUgdmlld3BvcnRcclxuICovXHJcbkhlbHBlcnMucHJvdG90eXBlLm1vZHVsZXMudmlld3BvcnQgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgdmlld3BvcnQgc2l6ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLnNpemUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICB2YXIgdyA9IHdpbmRvdyxcclxuICAgICAgICAgICAgZCA9IGRvY3VtZW50LFxyXG4gICAgICAgICAgICBlID0gZC5kb2N1bWVudEVsZW1lbnQsXHJcbiAgICAgICAgICAgIGcgPSBkLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0sXHJcbiAgICAgICAgICAgIHggPSB3LmlubmVyV2lkdGggfHwgZS5jbGllbnRXaWR0aCB8fCBnLmNsaWVudFdpZHRoLFxyXG4gICAgICAgICAgICB5ID0gdy5pbm5lckhlaWdodHx8IGUuY2xpZW50SGVpZ2h0fHwgZy5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHdpZHRoIDogeCxcclxuICAgICAgICAgIGhlaWdodCA6IHlcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBSZXR1cm4gc2VsZlxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07Il19
